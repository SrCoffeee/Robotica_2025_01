# Importa la librería principal de ROS 2 para Python
import rclpy
# Importa la clase base para crear nodos
from rclpy.node import Node
# Importa el tipo de mensaje Twist (usado para controlar velocidad lineal y angular)
from geometry_msgs.msg import Twist
# Librerías estándar para leer el teclado
import sys
import tty
import termios



def get_key():
    """Función para capturar una tecla del teclado sin esperar Enter."""
    fd = sys.stdin.fileno()  # Obtiene el descriptor de archivo estándar de entrada
    old_settings = termios.tcgetattr(fd)  # Guarda la configuración actual del terminal
    try:
        tty.setraw(sys.stdin.fileno())  # Cambia el modo a "raw", capturando las teclas inmediatamente
        key = sys.stdin.read(1)  # Lee un solo carácter
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)  # Restaura configuración original
    return key  # Retorna la tecla presionada



class TurtleMover(Node):
    """Clase para mover la tortuga usando las flechas del teclado."""
    def __init__(self):
        super().__init__('turtle_mover')  # Inicializa el nodo con el nombre 'turtle_mover'
        # Crea un publicador que enviará mensajes de tipo Twist al tópico '/turtle1/cmd_vel'
        self.publisher_ = self.create_publisher(Twist, '/turtle1/cmd_vel', 10)
        # Crea un temporizador que llama a 'control_loop' cada 0.1 segundos
        self.timer = self.create_timer(0.1, self.control_loop)





    def control_loop(self):
        """Función que se ejecuta repetidamente para leer teclas y mover la tortuga."""
        key = get_key()  # Captura una tecla presionada
        msg = Twist()  # Crea un mensaje vacío tipo Twist

        # Si la tecla presionada es 'escape' (inicio de flechas especiales)
        if key == '\x1b':
            key2 = get_key()  # Captura siguiente parte del código de la tecla
            key3 = get_key()  # Captura última parte (identifica la flecha)

            # Dependiendo de la flecha presionada, modifica el mensaje de movimiento
            if key3 == 'A':  # Flecha arriba
                msg.linear.x = 2.0  # Mover hacia adelante
                msg.angular.z = 0.0
            elif key3 == 'B':  # Flecha abajo
                msg.linear.x = -2.0  # Mover hacia atrás
                msg.angular.z = 0.0
            elif key3 == 'C':  # Flecha derecha
                msg.linear.x = 0.0
                msg.angular.z = -1.5708  # Giro en sentido horario (derecha)
            elif key3 == 'D':  # Flecha izquierda
                msg.linear.x = 0.0
                msg.angular.z = 1.5708  # Giro en sentido antihorario (izquierda)

        self.publisher_.publish(msg)  # Publica el mensaje para mover la tortuga




def main(args=None):
    """Función principal para iniciar el nodo."""
    rclpy.init(args=args)  # Inicializa la comunicación con ROS 2
    node = TurtleMover()  # Crea una instancia de nuestro nodo
    rclpy.spin(node)  # Mantiene el nodo corriendo
    node.destroy_node()  # Destruye el nodo al finalizar
    rclpy.shutdown()  # Apaga la comunicación de ROS 2



# Ejecuta la función principal si el archivo se ejecuta directamente
if __name__ == '__main__':
    main()
